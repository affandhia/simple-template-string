{"version":3,"sources":["App.tsx","index.tsx"],"names":["createStateContext","useText","TextProvider","useData","DataProvider","CopyButtonSnackbar","text","useState","isLoading","setLoading","useCopyToClipboard","copyToClipboard","IconButton","disabled","onClick","size","fontSize","sx","color","Snackbar","anchorOrigin","horizontal","vertical","open","autoHideDuration","onClose","Alert","severity","InputVariable","variable","data","setData","defaultValue","setText","useDebounce","i","useEffect","TextField","variant","label","value","onChange","e","target","InputProps","endAdornment","InputAdornment","position","grey","Variables","list","useMemo","Object","keys","length","Card","CardActions","Stack","direction","justifyContent","width","mr","Button","reduce","prev","cur","startIcon","CardContent","spacing","map","TextDataInput","textRef","useRef","isInputtingVariable","useLocalStorage","textRaw","setTextRaw","setList","selectionPos","start","end","error","setError","Handlebars","parseWithoutProcessing","body","filter","type","forEach","statement","params","original","path","newObj","j","handleUpdatePosition","selectionStart","selectionEnd","current","undefined","substring","focus","inputRef","helperText","multiline","fullWidth","onFocus","setTimeout","onBlur","onKeyDown","Renders","compiledText","strings","compile","alignItems","Typography","component","gutterBottom","App","useTitle","divider","Divider","orientation","flexItem","Grid","container","gap","xs","md","rootElement","document","getElementById","ReactDOMClient","render"],"mappings":"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","file":"static/js/main.2566869f.chunk.js","sourcesContent":["import {\n  Divider,\n  Stack,\n  TextField,\n  Typography,\n  Button,\n  Snackbar,\n  Alert,\n  Grid,\n  Card,\n  CardContent,\n  CardActions,\n  InputAdornment,\n  IconButton\n} from \"@mui/material\";\nimport Handlebars from \"handlebars\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport {\n  createStateContext,\n  useLocalStorage,\n  useDebounce,\n  useCopyToClipboard,\n  useTitle\n} from \"react-use\";\nimport CancelIcon from \"@mui/icons-material/Cancel\";\nimport { grey } from \"@mui/material/colors\";\nimport ContentCopyIcon from \"@mui/icons-material/ContentCopy\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nconst [useText, TextProvider] = createStateContext(\"\");\nconst [useData, DataProvider] = createStateContext(\n  {} as Record<string, string>\n);\n\nconst defaultText = `\n{{hello}}\n`;\n\nconst CopyButtonSnackbar = ({ text = \"\" }) => {\n  const [isLoading, setLoading] = useState(false);\n  const [, copyToClipboard] = useCopyToClipboard();\n\n  return (\n    <>\n      <IconButton\n        disabled={isLoading}\n        onClick={() => {\n          copyToClipboard(text);\n          setLoading(true);\n        }}\n        aria-label=\"copy\"\n        size=\"small\"\n      >\n        <ContentCopyIcon fontSize=\"small\" sx={{ color: \"primary.main\" }} />\n      </IconButton>\n      <Snackbar\n        anchorOrigin={{ horizontal: \"center\", vertical: \"top\" }}\n        open={isLoading}\n        autoHideDuration={2000}\n        onClose={() => setLoading(false)}\n      >\n        <Alert onClose={() => setLoading(false)} severity=\"success\">\n          Text Copied\n        </Alert>\n      </Snackbar>\n    </>\n  );\n};\n\nconst InputVariable = ({ variable }: { variable: string }) => {\n  const [data, setData] = useData();\n  const defaultValue = data[variable];\n  const [text, setText] = useState<string>(defaultValue);\n\n  useDebounce(\n    () => {\n      setData((i) => ({ ...i, [variable]: text }));\n    },\n    500,\n    [text]\n  );\n\n  useEffect(() => {\n    setText(defaultValue);\n  }, [defaultValue]);\n\n  return (\n    <TextField\n      size=\"small\"\n      variant=\"filled\"\n      label={variable}\n      value={text}\n      onChange={(e) => {\n        setText(e.target.value);\n      }}\n      InputProps={{\n        endAdornment: (\n          <InputAdornment position=\"end\">\n            <IconButton\n              onClick={() => setText(\"\")}\n              aria-label=\"clear\"\n              size=\"small\"\n            >\n              <CancelIcon fontSize=\"small\" sx={{ color: grey[400] }} />\n            </IconButton>\n          </InputAdornment>\n        )\n      }}\n    />\n  );\n};\n\nconst Variables = () => {\n  const [data, setData] = useData();\n\n  const list = useMemo(() => {\n    return Object.keys(data);\n  }, [data]);\n\n  if (!list.length) return null;\n\n  return (\n    <Card variant=\"outlined\">\n      <CardActions>\n        <Stack direction=\"row\" justifyContent=\"flex-end\" width=\"100%\" mr={1}>\n          <Button\n            onClick={() => {\n              setData(list.reduce((prev, cur) => ({ ...prev, [cur]: \"\" }), {}));\n            }}\n            aria-label=\"copy\"\n            size=\"small\"\n            variant=\"outlined\"\n            startIcon={<DeleteIcon />}\n            color=\"error\"\n          >\n            {\"Clear\"}\n          </Button>\n        </Stack>\n      </CardActions>\n      <CardContent>\n        <Stack spacing={1}>\n          {list.map((i) => (\n            <InputVariable key={i} variable={i} />\n          ))}\n        </Stack>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst TextDataInput = () => {\n  const textRef = useRef<HTMLInputElement>(null);\n  const isInputtingVariable = useRef<boolean>(false);\n  const [textRaw, setTextRaw] = useLocalStorage(\n    \"simple-te:textraw\",\n    defaultText\n  );\n  const [, setList] = useData();\n  const [text, setText] = useText();\n  const selectionPos = useRef({\n    start: 0,\n    end: 0\n  });\n  const [error, setError] = useState(\"\");\n\n  useDebounce(\n    () => {\n      setText(textRaw || \"\");\n    },\n    500,\n    [textRaw]\n  );\n\n  useEffect(() => {\n    const data = {} as Record<string, string>;\n    try {\n      Handlebars.parseWithoutProcessing(text)\n        .body.filter(({ type }) => type === \"MustacheStatement\")\n        .forEach((statement) => {\n          const variable =\n            // @ts-ignore\n            statement.params[0]?.original || statement.path?.original;\n          data[variable] = \"\";\n        });\n      setList((i) => {\n        const newObj = {} as Record<string, string>;\n        for (let j in data) {\n          newObj[j] = i[j];\n        }\n\n        return newObj;\n      });\n      setError(\"\");\n    } catch (e) {\n      setError(\"There is invalid variable\");\n    }\n  }, [text, setList]);\n\n  const handleUpdatePosition = (e: any) => {\n    const { selectionStart: start, selectionEnd: end } = e.target;\n    selectionPos.current = { start: start || 0, end: end || 0 };\n  };\n\n  return (\n    <Card variant=\"outlined\">\n      <CardActions>\n        <CopyButtonSnackbar text={text} />\n        <Button\n          onClick={() => {\n            const i = textRaw;\n            if (i !== undefined) {\n              setTextRaw(\n                `${i.substring(0, selectionPos.current.start)}{{}}${i.substring(\n                  selectionPos.current.end,\n                  i.length\n                )}`\n              );\n            }\n\n            isInputtingVariable.current = true;\n            textRef.current?.focus();\n          }}\n        >\n          Insert Variable\n        </Button>\n      </CardActions>\n      <CardContent>\n        <TextField\n          inputRef={textRef}\n          error={!!error}\n          helperText={error}\n          label=\"Text Message\"\n          multiline\n          value={textRaw}\n          fullWidth\n          onFocus={(e) => {\n            if (isInputtingVariable.current) {\n              setTimeout(() => {\n                e.target.selectionStart = selectionPos.current.start + 2;\n                e.target.selectionEnd = selectionPos.current.start + 2;\n                isInputtingVariable.current = false;\n              }, 60 /* give delay waiting for rerender */);\n            }\n          }}\n          onBlur={handleUpdatePosition}\n          onKeyDown={handleUpdatePosition}\n          onChange={(e) => {\n            setTextRaw(e.target.value);\n          }}\n        />\n      </CardContent>\n    </Card>\n  );\n};\n\nconst Renders = () => {\n  const [data] = useData();\n  const [text] = useText();\n\n  const compiledText = useMemo(() => {\n    let strings = \"\";\n\n    try {\n      strings = Handlebars.compile(text)(\n        Object.keys(data).reduce((prev, i) => {\n          return {\n            ...prev,\n            [i]: data[i] ? data[i] : `{{${i}}}`\n          };\n        }, {})\n      );\n    } catch (e) {}\n    return strings || text;\n  }, [text, data]);\n\n  return (\n    <Stack>\n      <Stack direction=\"row\" alignItems=\"center\"></Stack>\n      <Card variant=\"outlined\">\n        <CardActions>\n          <CopyButtonSnackbar text={compiledText} />\n        </CardActions>\n        <CardContent>\n          <Typography component=\"pre\" variant=\"body1\" gutterBottom>\n            {compiledText}\n          </Typography>\n        </CardContent>\n      </Card>\n    </Stack>\n  );\n};\n\nexport default function App() {\n  useTitle(\"Template String\");\n  return (\n    <TextProvider>\n      <DataProvider>\n        <Stack\n          spacing={1}\n          divider={<Divider orientation=\"horizontal\" flexItem />}\n        >\n          <Grid container sx={{ gap: 1 }}>\n            <Grid xs={12} md>\n              <TextDataInput />\n            </Grid>\n            <Grid xs={12} md>\n              <Renders />\n            </Grid>\n          </Grid>\n          <Variables />\n        </Stack>\n      </DataProvider>\n    </TextProvider>\n  );\n}\n","import { StrictMode } from \"react\";\nimport * as ReactDOMClient from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\") as Element;\nconst root = ReactDOMClient.createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}