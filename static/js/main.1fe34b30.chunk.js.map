{"version":3,"sources":["App.tsx","index.tsx"],"names":["createStateContext","useText","TextProvider","useData","DataProvider","CopyButtonSnackbar","text","onCopied","useState","isLoading","setLoading","useCopyToClipboard","copyToClipboard","IconButton","disabled","onClick","size","fontSize","sx","color","Snackbar","anchorOrigin","horizontal","vertical","open","autoHideDuration","onClose","Alert","severity","InputVariable","variable","data","setData","defaultValue","setText","useDebounce","i","useEffect","TextField","variant","label","value","onChange","e","target","InputProps","endAdornment","InputAdornment","position","Fade","in","grey","Variables","list","useMemo","Object","keys","length","Card","CardActions","Stack","direction","justifyContent","alignItems","width","mr","Typography","m","fontWeight","ml","Button","reduce","prev","cur","startIcon","CardContent","spacing","map","TextDataInput","textRef","useRef","isInputtingVariable","useLocalStorage","textRaw","setTextRaw","setList","selectionPos","start","end","error","setError","Handlebars","parseWithoutProcessing","body","filter","type","forEach","statement","params","original","path","newObj","j","handleUpdatePosition","selectionStart","selectionEnd","current","undefined","substring","focus","inputRef","helperText","multiline","fullWidth","onFocus","setTimeout","onBlur","onKeyDown","Renders","resultRef","compiledText","strings","compile","readOnly","App","useTitle","divider","Divider","orientation","flexItem","Grid","container","gap","xs","md","rootElement","document","getElementById","ReactDOMClient","render"],"mappings":"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","file":"static/js/main.1fe34b30.chunk.js","sourcesContent":["import {\n  Divider,\n  Stack,\n  TextField,\n  Button,\n  Snackbar,\n  Alert,\n  Grid,\n  Card,\n  CardContent,\n  CardActions,\n  InputAdornment,\n  IconButton,\n  Fade,\n  Typography\n} from \"@mui/material\";\nimport Handlebars from \"handlebars\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport {\n  createStateContext,\n  useLocalStorage,\n  useDebounce,\n  useCopyToClipboard,\n  useTitle\n} from \"react-use\";\nimport CancelIcon from \"@mui/icons-material/Cancel\";\nimport { grey } from \"@mui/material/colors\";\nimport ContentCopyIcon from \"@mui/icons-material/ContentCopy\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nconst [useText, TextProvider] = createStateContext(\"\");\nconst [useData, DataProvider] = createStateContext(\n  {} as Record<string, string>\n);\n\nconst defaultText = `\n{{hello}}\n`;\n\nconst CopyButtonSnackbar = ({ text = \"\", onCopied = () => {} }) => {\n  const [isLoading, setLoading] = useState(false);\n  const [, copyToClipboard] = useCopyToClipboard();\n\n  return (\n    <>\n      <IconButton\n        disabled={isLoading}\n        onClick={() => {\n          copyToClipboard(text);\n          onCopied();\n          setLoading(true);\n        }}\n        aria-label=\"copy\"\n        size=\"small\"\n      >\n        <ContentCopyIcon fontSize=\"small\" sx={{ color: \"primary.main\" }} />\n      </IconButton>\n      <Snackbar\n        anchorOrigin={{ horizontal: \"center\", vertical: \"top\" }}\n        open={isLoading}\n        autoHideDuration={2000}\n        onClose={() => setLoading(false)}\n      >\n        <Alert onClose={() => setLoading(false)} severity=\"success\">\n          Text Copied\n        </Alert>\n      </Snackbar>\n    </>\n  );\n};\n\nconst InputVariable = ({ variable }: { variable: string }) => {\n  const [data, setData] = useData();\n  const defaultValue = data[variable];\n  const [text, setText] = useState<string>(defaultValue);\n\n  useDebounce(\n    () => {\n      setData((i) => ({ ...i, [variable]: text }));\n    },\n    500,\n    [text]\n  );\n\n  useEffect(() => {\n    setText(defaultValue);\n  }, [defaultValue]);\n\n  return (\n    <TextField\n      size=\"small\"\n      variant=\"outlined\"\n      label={variable}\n      value={text}\n      onChange={(e) => {\n        setText(e.target.value);\n      }}\n      InputProps={{\n        endAdornment: (\n          <InputAdornment position=\"end\">\n            <Fade in={!!text}>\n              <IconButton\n                onClick={() => setText(\"\")}\n                aria-label=\"clear\"\n                size=\"small\"\n              >\n                <CancelIcon fontSize=\"small\" sx={{ color: grey[400] }} />\n              </IconButton>\n            </Fade>\n          </InputAdornment>\n        )\n      }}\n    />\n  );\n};\n\nconst Variables = () => {\n  const [data, setData] = useData();\n\n  const list = useMemo(() => {\n    return Object.keys(data);\n  }, [data]);\n\n  if (!list.length) return null;\n\n  return (\n    <Card variant=\"outlined\">\n      <CardActions>\n        <Stack\n          direction=\"row\"\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n          width=\"100%\"\n          mr={1}\n        >\n          <Typography\n            m={0}\n            variant=\"body1\"\n            fontWeight=\"bold\"\n            ml={1}\n            color=\"grey.700\"\n          >\n            {\"Variables\"}\n          </Typography>\n          <Button\n            onClick={() => {\n              setData(list.reduce((prev, cur) => ({ ...prev, [cur]: \"\" }), {}));\n            }}\n            aria-label=\"copy\"\n            size=\"small\"\n            variant=\"outlined\"\n            startIcon={<DeleteIcon />}\n            color=\"error\"\n          >\n            {\"Clear\"}\n          </Button>\n        </Stack>\n      </CardActions>\n      <CardContent>\n        <Stack spacing={1}>\n          {list.map((i) => (\n            <InputVariable key={i} variable={i} />\n          ))}\n        </Stack>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst TextDataInput = () => {\n  const textRef = useRef<HTMLInputElement>(null);\n  const isInputtingVariable = useRef<boolean>(false);\n  const [textRaw, setTextRaw] = useLocalStorage(\n    \"simple-te:textraw\",\n    defaultText\n  );\n  const [, setList] = useData();\n  const [text, setText] = useText();\n  const selectionPos = useRef({\n    start: 0,\n    end: 0\n  });\n  const [error, setError] = useState(\"\");\n\n  useDebounce(\n    () => {\n      setText(textRaw || \"\");\n    },\n    500,\n    [textRaw]\n  );\n\n  useEffect(() => {\n    const data = {} as Record<string, string>;\n    try {\n      Handlebars.parseWithoutProcessing(text)\n        .body.filter(({ type }) => type === \"MustacheStatement\")\n        .forEach((statement) => {\n          const variable =\n            // @ts-ignore\n            statement.params[0]?.original || statement.path?.original;\n          data[variable] = \"\";\n        });\n      setList((i) => {\n        const newObj = {} as Record<string, string>;\n        for (let j in data) {\n          newObj[j] = i[j];\n        }\n\n        return newObj;\n      });\n      setError(\"\");\n    } catch (e) {\n      setError(\"There is invalid variable\");\n    }\n  }, [text, setList]);\n\n  const handleUpdatePosition = (e: any) => {\n    const { selectionStart: start, selectionEnd: end } = e.target;\n    selectionPos.current = { start: start || 0, end: end || 0 };\n  };\n\n  return (\n    <Card variant=\"outlined\">\n      <CardActions>\n        <CopyButtonSnackbar text={text} />\n        <Button\n          onClick={() => {\n            const i = textRaw;\n            if (i !== undefined) {\n              setTextRaw(\n                `${i.substring(0, selectionPos.current.start)}{{}}${i.substring(\n                  selectionPos.current.end,\n                  i.length\n                )}`\n              );\n            }\n\n            isInputtingVariable.current = true;\n            textRef.current?.focus();\n          }}\n          size=\"small\"\n        >\n          Insert Variable\n        </Button>\n        <Fade in={!!textRaw}>\n          <Button\n            onClick={() => {\n              setTextRaw(\"\");\n            }}\n            aria-label=\"copy\"\n            size=\"small\"\n            startIcon={<DeleteIcon />}\n            color=\"error\"\n          >\n            {\"Clear\"}\n          </Button>\n        </Fade>\n      </CardActions>\n      <CardContent>\n        <TextField\n          inputRef={textRef}\n          error={!!error}\n          helperText={error}\n          label=\"Text Message\"\n          multiline\n          value={textRaw}\n          fullWidth\n          onFocus={(e) => {\n            if (isInputtingVariable.current) {\n              setTimeout(() => {\n                e.target.selectionStart = selectionPos.current.start + 2;\n                e.target.selectionEnd = selectionPos.current.start + 2;\n                isInputtingVariable.current = false;\n              }, 60 /* give delay waiting for rerender */);\n            }\n          }}\n          onBlur={handleUpdatePosition}\n          onKeyDown={handleUpdatePosition}\n          onChange={(e) => {\n            setTextRaw(e.target.value);\n          }}\n        />\n      </CardContent>\n    </Card>\n  );\n};\n\nconst Renders = () => {\n  const [data] = useData();\n  const [text] = useText();\n  const resultRef = useRef<HTMLInputElement>(null);\n\n  const compiledText = useMemo(() => {\n    let strings = \"\";\n\n    try {\n      strings = Handlebars.compile(text)(\n        Object.keys(data).reduce((prev, i) => {\n          return {\n            ...prev,\n            [i]: data[i] ? data[i] : `{{${i}}}`\n          };\n        }, {})\n      );\n    } catch (e) {}\n    return strings || text;\n  }, [text, data]);\n\n  return (\n    <Stack>\n      <Stack direction=\"row\" alignItems=\"center\"></Stack>\n      <Card variant=\"outlined\">\n        <CardActions>\n          <CopyButtonSnackbar\n            text={compiledText}\n            onCopied={() => {\n              resultRef.current?.focus();\n            }}\n          />\n        </CardActions>\n        <CardContent>\n          <TextField\n            fullWidth\n            label=\"Result\"\n            inputRef={resultRef}\n            multiline\n            value={compiledText}\n            InputProps={{ readOnly: true }}\n            onClick={() => {\n              resultRef.current?.focus();\n            }}\n            onFocus={(e) => {\n              if (resultRef.current) {\n                setTimeout(() => {\n                  e.target.selectionStart = 0;\n                  e.target.selectionEnd = compiledText.length;\n                }, 60 /* give delay waiting for rerender */);\n              }\n            }}\n          ></TextField>\n        </CardContent>\n      </Card>\n    </Stack>\n  );\n};\n\nexport default function App() {\n  useTitle(\"Template String\");\n  return (\n    <TextProvider>\n      <DataProvider>\n        <Stack\n          spacing={1}\n          divider={<Divider orientation=\"horizontal\" flexItem />}\n        >\n          <Grid container sx={{ gap: 1 }}>\n            <Grid xs={12} md>\n              <TextDataInput />\n            </Grid>\n            <Grid xs={12} md>\n              <Renders />\n            </Grid>\n          </Grid>\n          <Variables />\n        </Stack>\n      </DataProvider>\n    </TextProvider>\n  );\n}\n","import { StrictMode } from \"react\";\nimport * as ReactDOMClient from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\") as Element;\nconst root = ReactDOMClient.createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}