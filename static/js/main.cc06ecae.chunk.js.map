{"version":3,"sources":["App.tsx","index.tsx"],"names":["createStateContext","useText","TextProvider","useData","DataProvider","CopyButtonSnackbar","buttonText","text","useState","isLoading","setLoading","useCopyToClipboard","copyToClipboard","Button","disabled","onClick","Snackbar","anchorOrigin","horizontal","vertical","open","autoHideDuration","onClose","Alert","severity","InputVariable","variable","data","setData","setText","useDebounce","i","TextField","size","variant","label","value","onChange","e","target","Variables","list","useMemo","Object","keys","length","Card","CardContent","Stack","spacing","map","TextDataInput","textRef","useRef","isInputtingVariable","useLocalStorage","textRaw","setTextRaw","setList","selectionPos","start","end","error","setError","useEffect","Handlebars","parseWithoutProcessing","body","filter","type","forEach","statement","params","original","path","newObj","j","handleUpdatePosition","selectionStart","selectionEnd","current","CardActions","undefined","substring","focus","inputRef","helperText","multiline","fullWidth","onFocus","setTimeout","onBlur","onKeyDown","Renders","compiledText","strings","compile","reduce","prev","direction","alignItems","Typography","component","gutterBottom","App","useTitle","divider","Divider","orientation","flexItem","Grid","container","sx","gap","xs","md","rootElement","document","getElementById","ReactDOMClient","render"],"mappings":"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","file":"static/js/main.cc06ecae.chunk.js","sourcesContent":["import {\n  Divider,\n  Stack,\n  TextField,\n  Typography,\n  Button,\n  Snackbar,\n  Alert,\n  Grid,\n  Card,\n  CardContent,\n  CardActions\n} from \"@mui/material\";\nimport Handlebars from \"handlebars\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport {\n  createStateContext,\n  useLocalStorage,\n  useDebounce,\n  useCopyToClipboard,\n  useTitle\n} from \"react-use\";\n\nconst [useText, TextProvider] = createStateContext(\"\");\nconst [useData, DataProvider] = createStateContext(\n  {} as Record<string, string>\n);\n\nconst defaultText = `\n{{hello}}\n`;\n\nconst CopyButtonSnackbar = ({ buttonText = \"Copy\", text = \"\" }) => {\n  const [isLoading, setLoading] = useState(false);\n  const [, copyToClipboard] = useCopyToClipboard();\n\n  return (\n    <>\n      <Button\n        disabled={isLoading}\n        onClick={() => {\n          copyToClipboard(text);\n          setLoading(true);\n        }}\n      >\n        {buttonText}\n      </Button>\n      <Snackbar\n        anchorOrigin={{ horizontal: \"center\", vertical: \"top\" }}\n        open={isLoading}\n        autoHideDuration={2000}\n        onClose={() => setLoading(false)}\n      >\n        <Alert onClose={() => setLoading(false)} severity=\"success\">\n          Text Copied\n        </Alert>\n      </Snackbar>\n    </>\n  );\n};\n\nconst InputVariable = ({ variable }: { variable: string }) => {\n  const [data, setData] = useData();\n  const [text, setText] = useState<string>(data[variable]);\n\n  useDebounce(\n    () => {\n      setData((i) => ({ ...i, [variable]: text }));\n    },\n    500,\n    [text]\n  );\n\n  return (\n    <TextField\n      size=\"small\"\n      variant=\"standard\"\n      label={variable}\n      value={text}\n      onChange={(e) => {\n        setText(e.target.value);\n      }}\n    />\n  );\n};\n\nconst Variables = () => {\n  const [data] = useData();\n\n  const list = useMemo(() => {\n    return Object.keys(data);\n  }, [data]);\n\n  if (!list.length) return null;\n\n  return (\n    <Card variant=\"outlined\">\n      <CardContent>\n        <Stack spacing={1}>\n          {list.map((i) => (\n            <InputVariable key={i} variable={i} />\n          ))}\n        </Stack>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst TextDataInput = () => {\n  const textRef = useRef<HTMLInputElement>(null);\n  const isInputtingVariable = useRef<boolean>(false);\n  const [textRaw, setTextRaw] = useLocalStorage(\n    \"simple-te:textraw\",\n    defaultText\n  );\n  const [, setList] = useData();\n  const [text, setText] = useText();\n  const selectionPos = useRef({\n    start: 0,\n    end: 0\n  });\n  const [error, setError] = useState(\"\");\n\n  useDebounce(\n    () => {\n      setText(textRaw || \"\");\n    },\n    500,\n    [textRaw]\n  );\n\n  useEffect(() => {\n    const data = {} as Record<string, string>;\n    try {\n      Handlebars.parseWithoutProcessing(text)\n        .body.filter(({ type }) => type === \"MustacheStatement\")\n        .forEach((statement) => {\n          const variable =\n            // @ts-ignore\n            statement.params[0]?.original || statement.path?.original;\n          data[variable] = \"\";\n        });\n      setList((i) => {\n        const newObj = {} as Record<string, string>;\n        for (let j in data) {\n          newObj[j] = i[j];\n        }\n\n        return newObj;\n      });\n      setError(\"\");\n    } catch (e) {\n      setError(\"There is invalid variable\");\n    }\n  }, [text, setList]);\n\n  const handleUpdatePosition = (e: any) => {\n    const { selectionStart: start, selectionEnd: end } = e.target;\n    selectionPos.current = { start: start || 0, end: end || 0 };\n  };\n\n  return (\n    <Card variant=\"outlined\">\n      <CardActions>\n        <CopyButtonSnackbar text={text} />\n        <Button\n          onClick={() => {\n            const i = textRaw;\n            if (i !== undefined) {\n              setTextRaw(\n                `${i.substring(0, selectionPos.current.start)}{{}}${i.substring(\n                  selectionPos.current.end,\n                  i.length\n                )}`\n              );\n            }\n\n            isInputtingVariable.current = true;\n            textRef.current?.focus();\n          }}\n        >\n          Insert Variable\n        </Button>\n      </CardActions>\n      <CardContent>\n        <TextField\n          inputRef={textRef}\n          error={!!error}\n          helperText={error}\n          label=\"Text Message\"\n          multiline\n          value={textRaw}\n          fullWidth\n          onFocus={(e) => {\n            if (isInputtingVariable.current) {\n              setTimeout(() => {\n                e.target.selectionStart = selectionPos.current.start + 2;\n                e.target.selectionEnd = selectionPos.current.start + 2;\n                isInputtingVariable.current = false;\n              }, 100 /* give delay waiting for rerender */);\n            }\n          }}\n          onBlur={handleUpdatePosition}\n          onKeyDown={handleUpdatePosition}\n          onChange={(e) => {\n            setTextRaw(e.target.value);\n          }}\n        />\n      </CardContent>\n    </Card>\n  );\n};\n\nconst Renders = () => {\n  const [data] = useData();\n  const [text] = useText();\n\n  const compiledText = useMemo(() => {\n    let strings = \"\";\n\n    try {\n      strings = Handlebars.compile(text)(\n        Object.keys(data).reduce((prev, i) => {\n          return {\n            ...prev,\n            [i]: data[i] ? data[i] : `{{${i}}}`\n          };\n        }, {})\n      );\n    } catch (e) {}\n    return strings || text;\n  }, [text, data]);\n\n  return (\n    <Stack>\n      <Stack direction=\"row\" alignItems=\"center\"></Stack>\n      <Card variant=\"outlined\">\n        <CardActions>\n          <CopyButtonSnackbar text={compiledText} />\n        </CardActions>\n        <CardContent>\n          <Typography component=\"pre\" variant=\"body1\" gutterBottom>\n            {compiledText}\n          </Typography>\n        </CardContent>\n      </Card>\n    </Stack>\n  );\n};\n\nexport default function App() {\n  useTitle(\"Template String\");\n  return (\n    <TextProvider>\n      <DataProvider>\n        <Stack\n          spacing={1}\n          divider={<Divider orientation=\"horizontal\" flexItem />}\n        >\n          <Grid container sx={{ gap: 1 }}>\n            <Grid xs={12} md>\n              <TextDataInput />\n            </Grid>\n            <Grid xs={12} md>\n              <Renders />\n            </Grid>\n          </Grid>\n          <Variables />\n        </Stack>\n      </DataProvider>\n    </TextProvider>\n  );\n}\n","import { StrictMode } from \"react\";\nimport * as ReactDOMClient from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\") as Element;\nconst root = ReactDOMClient.createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}